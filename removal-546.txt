from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options


def removeAllFiles(folder_loc):
    files = glob.glob(os.path.join(folder_loc, '*'))
    for file in files:
        try: 
            os.remove(file)
        except Exception as e:
            print(f"Error deleting {file}: {e}")            
def open_chrome():
    profile = 'Default'
    profile_path = f'C:\\Users\\{USER}\\AppData\\Local\\Google\\Chrome\\User Data\\Default'
    options = Options()
    options.add_argument(f'--profile-directory={profile}')
    options.add_argument(f'user-data-dir={profile_path}')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument('--start-maximized')
    options.add_experimental_option('excludeSwitches', ['enable-logging'])
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-gpu')    
    service = Service("C:\\Users\\"+USER+"\\driver\\chromedriver.exe")    
    options.add_experimental_option("prefs", {
        "download.default_directory": DOWNLOADDIR,
        "download.prompt_for_download": False,
        "download.directory_upgrade": True,
        "safebrowsing.enabled": True
    })
    driver = webdriver.Chrome(service=service, options=options)
    return driver
def split_df_into_sheets_by_cost(max_cost):
    max_cost = int(max_cost)
    df = pd.read_excel("input_split.xlsx")
    sheets = []
    current_chunk = []
    current_sum = 0
    for _, row in df.iterrows():
        cost = row['Cost per Unit'] * row["Quantity"]
        if cost > max_cost : print("Limit is breaching in a row", row['FNSKU']) # inject 1
        if current_sum + cost > max_cost:
            # Save current chunk and reset
            sheets.append(pd.DataFrame(current_chunk))
            current_chunk = [row]
            current_sum = cost
        else:
            current_chunk.append(row)
            current_sum += cost
    # Append last chunk
    if current_chunk:
        sheets.append(pd.DataFrame(current_chunk))
    ct = 1
    for a in sheets:
        a.to_excel(f"data\\Output-{ct}.xlsx", index = False)
        ct += 1
def disable_all_buttons():
    button1.config(state=tk.DISABLED)
    button2.config(state=tk.DISABLED)
    button3.config(state=tk.DISABLED)
def enable_all_buttons():
    button1.config(state=tk.NORMAL)
    button2.config(state=tk.NORMAL)
    button3.config(state=tk.NORMAL)
def method_one():
    disable_all_buttons()
    removeAllFiles(DATADIR)
    input1 = input_box1.get()
    if not input1 or not input1.isdigit() :
        messagebox.showinfo("Error", "Input the cost to split the template")
        enable_all_buttons()
        return
    split_df_into_sheets_by_cost(input1)
    enable_all_buttons()
def method_two():
    disable_all_buttons()
    t1 = time.time()
    def upload_in_UI(f1):
        try:
            task = ""
            driver.get("about:blank")
            driver.get("https://removals-central-eu.removal.scot.amazon.dev/create/file")
            WebDriverWait(driver, 60, poll_frequency=1).until(EC.visibility_of_element_located((By.ID, "createRemovalsViaFileFormButton")))
            time.sleep(2)
            driver.find_element(By.ID, "uploadFilePath").send_keys(str(f1))
            dropdown = driver.find_element(By.ID, "operationReason")
            select = Select(dropdown)
            select.select_by_value("Other Reason")
            driver.find_element(By.ID, "operationReasonDetails").send_keys(content)
            driver.find_element(By.XPATH, "//input[@name='needReviewBeforeSubmit']").click()
            time.sleep(1)
            driver.find_element(By.XPATH, "//div[@id='need_review_before_submit_dialog']//a[text()='Confirm']").click()
            time.sleep(1)
            driver.execute_script("window.scrollBy(0, 700);")
            time.sleep(1)
            driver.find_element(By.ID, "createRemovalsViaFileFormButton").click()
            WebDriverWait(driver, 60, poll_frequency=2).until(EC.visibility_of_element_located((By.ID, "async_task_id")))
            time.sleep(3)
            task = driver.find_element(By.ID, "async_task_id").text
            if not task:
                if len(driver.current_url.split("/")) == 6:
                    task = driver.current_url.split("/")[-1]
        finally:
            return task    
    out_df = {
                "file" : [],
                "id"    : []
            }
    dataDir = Path(dataDir)
    # Count all files (not directories) recursively
    total_files = sum(1 for file in dataDir.rglob('*') if file.is_file())
    print(f"Total files: {total_files}")
    for file_path in dataDir.iterdir():
        if file_path.is_file():
            print(f"Processing: {file_path.name}", total_files)
            id1 = upload_in_UI(file_path)    
            out_df["file"].append(file_path.name)
            out_df['id'].append(id1)
            total_files -= 1
    out_df = pd.DataFrame(out_df)
    out_df.to_excel("splitByCost_Output.xlsx", index=False)
    t2 = time.time()
    print("Completed in",round((t2-t1)/60, 2), "minutes")
    enable_all_buttons()
def method_three():
    disable_all_buttons()
    t1 = time.time()
    removeAllFiles(DOWNLOADDIR)
    df = pd.read_excel("splitByCost_Output.xlsx")
    print("Total id", len(df))
    for index, row in df.iterrows():
        try:
            failed = success = removal_id = is_error_file = ""
            print(index, end="-")
            driver.get("about:blank")
            driver.get(f"https://removals-central-eu.removal.scot.amazon.dev/create/file/{row['id']}")
            WebDriverWait(driver, 40, poll_frequency=2).until(EC.visibility_of_element_located((By.ID, "create_removals_via_file_result_main")))
            time.sleep(3)
            if len(driver.find_elements(By.XPATH, f"//a[@href='/tools/task/{row['id']}/download?type=FAILURE']")) > 0:
                driver.find_element(By.XPATH, f"//a[@href='/tools/task/{row['id']}/download?type=FAILURE']").click()
                time.sleep(5)        
                is_error_file = "Y"
            if len(driver.find_elements(By.ID, "created_order_ids")) > 0 :
                removal_id = driver.find_element(By.ID, "created_order_ids").get_attribute("data-content")
            if len(driver.find_elements(By.XPATH, "//li[@class='li-level-one']/mark[1]")) > 0 :
                success = driver.find_element(By.XPATH, "//li[@class='li-level-one']/mark[1]").text.split(" ")[0]
            if len(driver.find_elements(By.XPATH, "//li[@class='li-level-one-fist li-level-one-last']/mark[1]")) > 0 :
                failed = driver.find_element(By.XPATH, "//li[@class='li-level-one-fist li-level-one-last']/mark[1]").text.split(" ")[0]
        finally:
            df.at[index, "removal_id"] = removal_id
            df.at[index, "Error File"] = is_error_file
            df.at[index, "Success Units"] = success
            df.at[index, "Failed Units"] = failed
            
    df.to_excel("removalId_Output.xlsx", index=False)
    t2 = time.time()
    print("Completed in",round((t2-t1)/60, 2), "minutes")
    enable_all_buttons()
def method_four():
    disable_all_buttons()
    t1 = time.time()    
    def consolidate_excel_files(source_folder, output_file):
        all_dataframes = []

        for file in os.listdir(source_folder):
            if file.endswith(".xlsx") or file.endswith(".xls"):
                file_path = os.path.join(source_folder, file)
                try:
                    df = pd.read_excel(file_path)
                    df['SourceFile'] = file  # Optional: Add column to track source file
                    all_dataframes.append(df)
                    print(f"Loaded: {file}")
                except Exception as e:
                    print(f"Failed to read {file}: {e}")

        if all_dataframes:
            combined_df = pd.concat(all_dataframes, ignore_index=True)
            combined_df.to_excel(output_file, index=False)
            print(f"\n✅ Consolidated Excel saved to: {output_file}")
        else:
            print("⚠️ No Excel files found or loaded.")
    # Example usage
    source_folder = DOWNLOADDIR
    output_excel = "consolidated.xlsx"
    consolidate_excel_files(source_folder, output_excel)
    t2 = time.time()
    print("Completed in",round((t2-t1)/60, 2), "minutes")
    enable_all_buttons()

# Constants
USER = os.getlogin()
THISDIR = os.getcwd()
DOWNLOADDIR = THISDIR + "\\download"
DATADIR = THISDIR + "\\data"
os.makedirs(DOWNLOADDIR, exist_ok=True)
os.makedirs(DATADIR, exist_ok=True)
driver = open_chrome()
content = ""
with open("text.txt", "r") as file:
    content = file.read()  

# Create main window
root = tk.Tk()
root.title("Removals Portal Welcomes You")
root.geometry("350x300")

# Input field 1
input_label1 = tk.Label(root, text="Enter the Total Cost per file")
input_label1.pack(pady=(10, 0))

input_box1 = tk.Entry(root, width=20)
input_box1.pack(pady=(0, 10))

# Create buttons
button1 = tk.Button(root, text="Split File", command=method_one)
button2 = tk.Button(root, text="Upload", command=method_two)
button3 = tk.Button(root, text="Track Upload", command=method_three)
button4 = tk.Button(root, text="Combine files", command=method_four)

# Layout buttons
button1.pack(pady=5)
button2.pack(pady=5)
button3.pack(pady=5)
button4.pack(pady=5)

# Start the GUI event loop
root.mainloop()

driver.quit()
