"""
Ramalingam, Sruthilaya _sruthil
Saha Ghosh, Sahelee _sasahele

quantity and Cost update asin_po wise

"""


import os
import time
import pandas as pd
import sys

from tqdm import tqdm

from selenium import webdriver
from selenium.webdriver import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains

user_name = os.getlogin()
startTime = time.time()

def open_chrome():
    profile = 'Default'
    profile_path = f'C:\\Users\\{user_name}\\AppData\\Local\\Google\\Chrome\\User Data\\Default'
    options = Options()
    options.add_argument(f'user-data-dir={profile_path}')
    options.add_argument(f'--profile-directory={profile}')
    options.add_argument('--start-maximized')
    options.add_argument('--disable-dev-shm-usage')
    options.add_experimental_option('excludeSwitches', ['enable-logging'])
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-gpu')
    service = Service("C:\\Users\\"+user_name+"\\driver\\chromedriver.exe")
    download_path = "C:\\Users\\"+user_name+"\\Downloads"
    options.add_experimental_option("prefs", {
        "download.default_directory": download_path,
        "download.prompt_for_download": False,
        "download.directory_upgrade": True,
        "safebrowsing.enabled": True
    })
    driver = webdriver.Chrome(service=service, options=options)
    return driver



rn = input("""1. na
2. fe
3. eu
Choose the region by number input: """)


if rn not in ["1", "2", "3"]:
    print("Invalid Selection")
    time.sleep(10)
    sys.exit()
    
rn_map = {
    "1" : "na",
    "2":"fe",
    "3":"eu"
}

driver = open_chrome()
df = pd.read_excel(f"PO_INPUT.xlsx")

# looping over given PO
for index, row in tqdm(df.iterrows(), total=len(df), desc="POs"):
    try:    
        # to open the url in browser
        driver.get('about:blank')      
        driver.get(f'https://procurementportal-{rn_map[rn]}.corp.amazon.com/bp/action/confirmPo?poId={row['po']}')
        WebDriverWait(driver,20, poll_frequency=1).until(EC.visibility_of_element_located((By.CLASS_NAME,'react-grid-Viewport')))
        # Get the entire h4 element
        condition_element = driver.find_element(By.XPATH, "//h4[b[contains(., 'Condition:')]]")
        # Extract the text, remove the label, and strip whitespace
        condition_text = condition_element.text.replace("Condition:", "").strip()
        df.at[index, "condition"] = condition_text
        
        if condition_text.lower() not in ["submitted", "completelyconfirmed", "partiallyconfirmed"]:
            continue
        WebDriverWait(driver,20, poll_frequency=1).until(EC.visibility_of_element_located((By.XPATH,"//button[text()='Filter Rows']"))).click()
        time.sleep(0.4)
        
        driver.find_element(By.XPATH,'//div/div/div/div/div[1]/div[2]/div/div[1]/div[1]/div/div').click()
        driver.find_element(By.XPATH,'//div[1]/div[1]/div/div/div[2]/input').send_keys(str(row['asin']) +'\n')
        
        time.sleep(0.4)
                
        li = driver.find_element(By.CLASS_NAME,'react-grid-Viewport').find_elements(By.TAG_NAME,'span')
        
        if (len(li)>0 and len(li)<15):
            
            try:
                df.at[index, "ack_code"] = li[3].text                
                if(li[3].text == 'AC'):
                    
                    # handle the qty
                    if not pd.isna(row["quantity"]):
                        df.at[index, "pre_qty"] = li[6].text
                        action = ActionChains(driver)
                        action.double_click(li[6]).send_keys(row["quantity"]).send_keys(Keys.ENTER).perform()
                        time.sleep(0.2)
                        df.at[index, "is_qty_updated"] = "Yes"
                        
                        
                    if not pd.isna(row["cost"]):
                        df.at[index, "pre_cost"] = li[13].text
                        action = ActionChains(driver)
                        action.double_click(li[13]).send_keys(row["cost"]).send_keys(Keys.ENTER).perform()
                        time.sleep(0.2)
                        df.at[index, "is_cost_updated"] = "Yes"
                        
                WebDriverWait(driver,20, poll_frequency=1).until(EC.visibility_of_element_located((By.ID,'BottomButton-Submit'))).click()
                WebDriverWait(driver, 20, poll_frequency=1).until(EC.visibility_of_element_located((By.XPATH, "//*[contains(text(), 'POLE task launched! View status in')]")))
                            
            except Exception as e:
                pass
            
    except Exception as e:
        pass    

driver.quit()        

df.to_excel(f"PO_Output.xlsx",index=False)     

endTime = time.time()

print("Operational Completed")
print("Time Taken :", round((endTime-startTime)/60, 2), 'mins')

time.sleep(10)
