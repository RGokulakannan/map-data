print("Testing modul")

import pandas as pd
import os
import pandas as pd
from selenium import webdriver
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from pathlib import Path
from time import sleep

user_name = os.getlogin()

def delete_all_files_in_folder(folder_path):
    folder = Path(folder_path)
    # Check if the folder exists
    if folder.exists() and folder.is_dir():
        # Iterate over all files in the folder and delete them
        for file in folder.iterdir():
            if file.is_file():  # Ensure it's a file, not a directory
                file.unlink()  # Deletes the file
                print(f"Deleted: {file}")
    else:
        print(f"The folder {folder_path} does not exist or is not a directory.")

def open_chrome():
    profile = 'Default'
    profile_path = f'C:\\Users\\{user_name}\\AppData\\Local\\Google\\Chrome\\User Data\\Default'
    options = Options()
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument('--start-maximized')
    options.add_experimental_option('excludeSwitches', ['enable-logging'])
    options.add_argument(f'user-data-dir={profile_path}')
    options.add_argument(f'--profile-directory={profile}')
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-gpu')    
    service = Service("C:\\Users\\"+user_name+"\\driver\\chromedriver.exe")
    options.add_experimental_option("prefs", {
        "download.default_directory": download_path,
        "download.prompt_for_download": False,
        "download.directory_upgrade": True,
        "safebrowsing.enabled": True
    })
    driver = webdriver.Chrome(service=service, options=options)
    return driver

os.makedirs("template", exist_ok=True)
os.makedirs("download", exist_ok=True)

# Example usage
folder_path = "template"
download_path = os.path.abspath("download")
downloadDir = Path(download_path)

delete_all_files_in_folder(folder_path)
delete_all_files_in_folder(download_path)

df = pd.read_excel("PO_All_Edit_input.xlsx")

# PO handoff windows 1

df_dw = df[["PO", "Handoff window start date (MM/DD/YYYY)", "Handoff window end date (MM/DD/YYYY)", "Email Notification? (Y/N)"]]
df_dw = df_dw[df_dw["Handoff window end date (MM/DD/YYYY)"].notna()]
has_start_date = df_dw["Handoff window start date (MM/DD/YYYY)"].notna()
no_start_date  = ~has_start_date

if not df_dw[has_start_date].empty:
    print("Preparing template for PO start and end date")
    df_dw[has_start_date].to_csv("template/batchHandoffUpdate_both.csv", index=False)

if not df_dw[no_start_date].empty:
    print("Preparing template for PO end date")
    df_dw[no_start_date][["PO", "Handoff window end date (MM/DD/YYYY)", "Email Notification? (Y/N)"]].to_csv("template/batchHandoffUpdate_end.csv", index=False)

# PO Cancel 2

df_po_cancel = df[["PO", "Cancel", "ASIN", "Reason"]]
df_po_cancel = df_po_cancel[df_po_cancel["Cancel"].notna()]
df_po_cancel_only_item = df_po_cancel["ASIN"].notna()
df_po_cancel_all_item  = ~df_po_cancel_only_item

if not df_po_cancel[df_po_cancel_only_item].empty:
    print("Preparing template for PO Cancel - Only Item")
    df_po_cancel[df_po_cancel_only_item][["PO","ASIN", "Reason"]].to_csv("template/batchCancel_item.csv", index=False)

if not df_po_cancel[df_po_cancel_all_item].empty:
    print("Preparing template for PO Cancel - All Items")
    df_po_cancel[df_po_cancel_all_item][["PO", "Reason"]].to_csv("template/batchCancel_all.csv", index=False)

# PO UnCancel 3
df_po_uncancel = df[
    (df[["PO", "Uncancel"]].notna().all(axis=1)) & 
    (df["Uncancel"] == "Y")
][["PO"]]
if not df_po_uncancel.empty:
    print("Preparing template for PO-UnCancel")
    df_po_uncancel[["PO"]].to_csv("template/batchUncancel.csv", index=False)

# PO confirm 4
df_po_confirm = df[
    (df[["PO", "Confirm(A/R)"]].notna().all(axis=1)) & 
    (df["Confirm(A/R)"] == "Y")
][["PO"]]
if not df_po_confirm.empty:
    print("Preparing template for PO Confirm")
    df_po_confirm.to_csv("template/batchAutoConfirm.csv", index=False)

# PO Unconfirm 5
df_po_unconfirm = df[
    (df[["PO", "Unconfirm"]].notna().all(axis=1)) & 
    (df["Unconfirm"] == "Y")
][["PO"]]
if not df_po_unconfirm.empty:
    print("Preparing template for PO-Unconfirm")
    df_po_unconfirm.to_csv("template/batchUnconfirm.csv", index=False)


# PO Release 6
df_po_relese = df[
    (df[["PO", "Release"]].notna().all(axis=1)) & 
    (df["Release"] == "Y")
][["PO"]]
if not df_po_relese.empty:
    print("Preparing template for PO Release")
    df_po_relese.to_csv("template/batchRelease.csv", index=False)


# FC Flipper 7
df_fc_flipper = df[
    (df[["PO", "New Fc", "Reason2"]].notna().all(axis=1))
][["PO", "New Fc", "Reason2"]]
df_fc_flipper = df_fc_flipper.rename(columns={'Reason2': 'Reason'})
if not df_fc_flipper.empty:
    print("Preparing template for FC Flipper")
    df_fc_flipper.to_csv("template/batchFcFlip.csv", index=False)


input("Upload ?")

driver = open_chrome()

driver.get("https://procurementportal-eu.corp.amazon.com/bp/home")
WebDriverWait(driver, 60, poll_frequency=1).until(EC.presence_of_element_located((By.ID, "sc-content-container")))

# Define the directory
directory = Path('template')  # Replace with your actual path

map_process = {
    "batchHandof": "batchHandoffUpdate",
    "batchCancel": "batchCancel",
    "batchUncanc": "batchUncancel",
    "batchAutoCo": "batchAutoConfirm",
    "batchUnconf": "batchUnconfirm",
    "batchReleas": "batchRelease",
    "batchFcFlip": "batchFcFlip",
    "batchEddUpd": "batchEddUpdate",
    "batchCostUp": "batchCostUpdate"
}

# List all files with absolute paths
all_files = [file.resolve() for file in directory.rglob('*') if file.is_file() and file.name != 'PO_UnCancel.csv']

if Path('template/PO_UnCancel.csv').exists():
    all_files.insert(0, Path('template/PO_UnCancel.csv').resolve())
    
final_task_id = []

# Print the results
for file in all_files:
    print(f"Processing file: {file.name}")
    driver.get(f"https://procurementportal-eu.corp.amazon.com/bp/action/{map_process[file.name[0:11]]}")
    WebDriverWait(driver, 60, poll_frequency=1).until(EC.visibility_of_element_located((By.XPATH, "//button[text()='Upload Batch Update File']"))).click()
    
    sleep(1)    
    driver.find_element(By.ID, "mib-file-input").send_keys(str(file))
    
    sleep(1)
    driver.find_element(By.XPATH, "//button[text()='Submit']").click()
    
    sleep(1)
    WebDriverWait(driver, 60, poll_frequency=1).until(EC.visibility_of_element_located((By.CLASS_NAME, "alert-success")))
    
    url1 = driver.find_element(By.CLASS_NAME, "alert-success").find_element(By.TAG_NAME, "a").text
    
    print(f"Processed file: {file.name}, URL: {url1}")
    final_task_id.append(url1)
    

outputFile = []

for url in final_task_id:
    
    print(url, end = " .. ")
    driver.get(f"https://procurementportal-eu.corp.amazon.com/bp/pole/view?taskId={url}")
    WebDriverWait(driver, 60, poll_frequency=2).until(EC.visibility_of_element_located((By.XPATH, "//th[text()='Task ID']")))
    
    ct = 0
    while ct < 30:
        if not len(driver.find_elements(By.XPATH, "//td[text()='RUNNING']")):
            break
        ct+=1
        sleep(1)
        
    if len(driver.find_elements(By.XPATH, "//kat-button[@label='Export Results']")):
        driver.execute_script("window.scrollBy(0, 100);")
        sleep(1)
        driver.find_element(By.XPATH, "//kat-button[@label='Export Results']").click()
        sleep(1)
        
        f1 = {f for f in downloadDir.iterdir() if f.is_file()}
        driver.find_element(By.XPATH, "//button[text()='Download Excel']").click()
        sleep(1)
        
        ct = 0
        while ct<30:
            f2 = {f for f in downloadDir.iterdir() if f.is_file()}
            if f2-f1:
                f2 = next(iter(f2), None) # Returns None if set is empty
                if f2 :
                    if str(f2).endswith(".xlsx"):
                        break
            sleep(1)
            ct+=1
        
        outputFile.append(pd.read_excel(f2))
        print("ok")
    else:
        print("Download is missing for ", url)

pd.concat(outputFile, ignore_index=True).to_excel("Output.xlsx", index=False)
driver.quit()
