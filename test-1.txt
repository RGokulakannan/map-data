
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options

print("This is testing model")
def move_all_files(src_folder, dest_folder):
    os.makedirs(dest_folder, exist_ok=True)  # Create destination if it doesn't exist
    for filename in os.listdir(src_folder):
        src_path = os.path.join(src_folder, filename)
        dest_path = os.path.join(dest_folder, filename)
        if os.path.isfile(src_path):  # Only move files, not folders
            shutil.move(src_path, dest_path)
def open_chrome():
    profile = 'Default'
    profile_path = f'C:\\Users\\{user_name}\\AppData\\Local\\Google\\Chrome\\User Data\\Default'
    options = Options()
    options.add_argument(f'--profile-directory={profile}')
    options.add_argument(f'user-data-dir={profile_path}')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument('--start-maximized')
    options.add_experimental_option('excludeSwitches', ['enable-logging'])
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-gpu')    
    service = Service("C:\\Users\\"+user_name+"\\driver\\chromedriver.exe")    
    options.add_experimental_option("prefs", {
        "download.default_directory": downloadDir,
        "download.prompt_for_download": False,
        "download.directory_upgrade": True,
        "safebrowsing.enabled": True
    })
    driver = webdriver.Chrome(service=service, options=options)
    return driver
def removeAllFiles(folder_loc):
    files = glob.glob(os.path.join(folder_loc, '*'))
    for file in files:
        try: 
            os.remove(file)
        except Exception as e:
            print(f"Error deleting {file}: {e}")
def upload_in_UI(f1):
    try:
        task = ""
        driver.get("about:blank")
        driver.get("https://removals-central-eu.removal.scot.amazon.dev/create/file")
        WebDriverWait(driver, 60, poll_frequency=1).until(EC.visibility_of_element_located((By.ID, "createRemovalsViaFileFormButton")))
        time.sleep(2)
        driver.find_element(By.ID, "uploadFilePath").send_keys(str(f1))
        dropdown = driver.find_element(By.ID, "operationReason")
        select = Select(dropdown)
        select.select_by_value("Other Reason")
        driver.find_element(By.ID, "operationReasonDetails").send_keys(content)
        driver.find_element(By.XPATH, "//input[@name='needReviewBeforeSubmit']").click()
        time.sleep(1)
        driver.find_element(By.XPATH, "//div[@id='need_review_before_submit_dialog']//a[text()='Confirm']").click()
        time.sleep(1)
        driver.execute_script("window.scrollBy(0, 700);")
        time.sleep(1)
        driver.find_element(By.ID, "createRemovalsViaFileFormButton").click()
        WebDriverWait(driver, 60, poll_frequency=2).until(EC.visibility_of_element_located((By.ID, "async_task_id")))
        time.sleep(2)
        task = driver.find_element(By.ID, "async_task_id").text
    finally:
        return task
def consolidate_excel_files(source_folder, output_file):
    all_dataframes = []

    for file in os.listdir(source_folder):
        if file.endswith(".xlsx") or file.endswith(".xls"):
            file_path = os.path.join(source_folder, file)
            try:
                df = pd.read_excel(file_path)
                df['SourceFile'] = file  # Optional: Add column to track source file
                all_dataframes.append(df)
                print(f"Loaded: {file}")
            except Exception as e:
                print(f"Failed to read {file}: {e}")

    if all_dataframes:
        combined_df = pd.concat(all_dataframes, ignore_index=True)
        combined_df.to_excel(output_file, index=False)
        print(f"\n✅ Consolidated Excel saved to: {output_file}")
    else:
        print("⚠️ No Excel files found or loaded.")
        
content = ""
# Read entire file
with open("text.txt", "r") as file:
    content = file.read()  
    
user_name = os.getlogin()
thisDir = os.getcwd()
downloadDir = thisDir + "\\download"
dataDir = thisDir + "\\data"
os.makedirs(downloadDir, exist_ok=True)
os.makedirs(dataDir, exist_ok=True)
removeAllFiles(downloadDir)
removeAllFiles(dataDir)

driver = open_chrome()


taskIds = ['110497461','110497521','110497551','110497581','110497611','110497641','110497671','110497711','110497751','110497791',
    '110497821','110497851','110497881','110497911','110497941','110497961','110497991','110498011','110498041','110498061',
    '110498091','110498131','110498161','110498191','110498221','110498261','110498281','110498331','110498351','110498391',
    '110498421','110498431','110498461','110498481','110498511','110498541','110498571','110498611','110498641','110498661',
    '110498701','110498731','110498751','110498771','110498811','110498841','110498861','110498901']

out_dict = {
    "id" : [],
    "removal_id" : []
}

for taskId in taskIds:
    driver.get("about:blank")
    driver.get(f"https://removals-central-eu.removal.scot.amazon.dev/create/file/{taskId}")
    WebDriverWait(driver, 40, poll_frequency=2).until(EC.visibility_of_element_located((By.ID, "create_removals_via_file_result_main")))
    time.sleep(3)
    
    removal_id = ""
    if len(driver.find_elements(By.XPATH, f"//a[@href='/tools/task/{taskId}/download?type=FAILURE']")) > 0:
        driver.find_element(By.XPATH, f"//a[@href='/tools/task/{taskId}/download?type=FAILURE']").click()
        time.sleep(7)
    else : print("No Error file", taskId)
    
    if len(driver.find_elements(By.ID, "created_order_ids")) > 0 :
        removal_id = driver.find_element(By.ID, "created_order_ids").get_attribute("data-content")
    out_dict["id"].append(taskId)
    out_dict["removal_id"].append(removal_id)
    
out_df = pd.DataFrame(out_dict)
out_df.to_excel("removalId_Output.xlsx", index=False)

time.sleep(7)
# Example usage
source_folder = thisDir + "\\download"
output_excel = "consolidated.xlsx"
consolidate_excel_files(source_folder, output_excel)


driver.quit()
